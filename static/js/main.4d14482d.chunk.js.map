{"version":3,"sources":["History.js","App.js","serviceWorker.js","index.js"],"names":["History","props","classes","isIncreasing","time","Date","timestamp","concat","getHours","getMinutes","getSeconds","tradeSize","transaction","quotes","USD","volume_24h","market_cap","toFixed","price","react_default","a","createElement","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","poll","lastPolled","fetch","then","data","json","endTrans","state","transactions","length","metadata","lastData","newData","objectSpread","_id","getTime","latestPrice","document","title","setState","toConsumableArray","clearInterval","poller","_this2","setTimeout","setInterval","map","trans","src_History","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d14482d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst History = (props) => {\nlet classes= props.isIncreasing ? \"increasing\": \"\";\nlet time = new Date(props.timestamp);\nlet timestamp = `${time.getHours() < 9 ? \"0\"+time.getHours() : time.getHours()}:${time.getMinutes() <= 9 ? \"0\"+time.getMinutes() :time.getMinutes()}:${time.getSeconds() < 9 ? \"0\"+time.getSeconds() :time.getSeconds()}`;\nlet tradeSize = ((props.transaction.quotes.USD.volume_24h) / (props.transaction.quotes.USD.market_cap)).toFixed(4);\nlet price = (+props.transaction.quotes.USD.price).toFixed(4)\nreturn(\n<div className={`transaction ${classes}`}>\n  <p className=\"tradesize\">\n    {props.isIncreasing ? <span>&uarr;</span> : <span>&darr;</span>} &nbsp;\n    {tradeSize}\n  </p>\n  <p className=\"tradeprice\">{price}</p>\n  <p className=\"tradetime\">{timestamp}</p>\n</div>\n);\n};\n\nexport default History;","import React, { Component } from 'react';\nimport './App.css';\nimport History from \"./History\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      transactions: []\n    };\n  }\n\n  poll = () => {\n    let lastPolled = new Date();\n    fetch(\"https://api.coinmarketcap.com/v2/ticker/1/\")\n    .then(data => data.json())\n    .then(data => {\n      let endTrans = this.state.transactions[this.state.transactions.length-1];\n      if( endTrans && data.metadata.timestamp !== endTrans.metadata.timestamp) {\n        let lastData = this.state.transactions[this.state.transactions.length -1];\n        let newData = {...data, isIncreasing: lastData.data.quotes.USD.price < data.data.quotes.USD.price, _id: (new Date()).getTime() }\n        let latestPrice = newData.data.quotes.USD.price.toFixed(4);\n        document.title = latestPrice + \" BTC History -Bitcoin\";\n        this.setState({\n          lastPolled,\n          transactions: [newData, ...this.state.transactions]\n        });  \n      }\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.poller);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.poller = setInterval(this.poll, 2200);\n      fetch(\"https://api.coinmarketcap.com/v2/ticker/1/?start=1&limit=10\")\n      .then(data => data.json())\n      .then(data => {\n        data.data.quotes.USD.price.toFixed(3);\n        let newData = {...data, isIncreasing: true, _id: (new Date()).getTime() }\n        let latestPrice = newData.data.quotes.USD.price.toFixed(4);\n        this.setState({\n          transactions: [newData, ...this.state.transactions]\n        });\n        document.title = latestPrice + \" BTC History -Bitcoin\";\n      });     \n    }, 500);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"> Polls data in interals of 2.2 seconds. max 30 requests allowed in a min from api.\n        </header>\n        <div className=\"transactions-wrap\">\n          <h2 className=\"title\">Trade History</h2>\n          <div className=\"transactions-header\">\n            <p>Trade Size</p>\n            <p>Price(USD)</p>\n            <p>Time</p>\n          </div>\n          <div className=\"transactions\">\n            {\n            this.state.transactions.length === 0 ? <div className=\"loader\"></div>\n             : this.state.transactions.map(trans =>\n              (\n              <History\n                key ={trans._id}\n                transaction={trans.data}\n                isIncreasing ={trans.isIncreasing}\n                timestamp={trans._id}\n                />)\n              )\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}